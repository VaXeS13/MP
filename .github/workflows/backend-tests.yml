name: Backend Tests & Analysis

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'test/**'
      - '.github/workflows/backend-tests.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'test/**'
  schedule:
    # Run nightly backend tests at 3 AM UTC
    - cron: '0 3 * * *'

jobs:
  build-and-test:
    name: Build & Test (.NET 9.0)
    runs-on: ubuntu-latest

    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: TestPassword123!
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'TestPassword123!' -Q 'SELECT 1' || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 1433:1433

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # For SonarQube analysis

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
          cache: true
          cache-dependency-path: '**/packages.lock.json'

      - name: Restore dependencies
        run: dotnet restore MP.sln

      - name: Build solution
        run: dotnet build MP.sln --configuration Release --no-restore

      - name: Wait for SQL Server
        run: |
          for i in {1..30}; do
            if dotnet sqlcmd -S localhost -U sa -P 'TestPassword123!' -Q 'SELECT 1'; then
              break
            fi
            echo "Waiting for SQL Server... ($i/30)"
            sleep 1
          done

      - name: Run Domain Layer Tests
        run: dotnet test test/MP.Domain.Tests/MP.Domain.Tests.csproj --no-build --configuration Release --verbosity normal --logger "trx;LogFileName=domain-tests.trx" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
        env:
          ConnectionStrings__Default: "Server=localhost;Database=MP_Test;User Id=sa;Password=TestPassword123!;TrustServerCertificate=True;"

      - name: Run Application Layer Tests
        run: dotnet test test/MP.Application.Tests/MP.Application.Tests.csproj --no-build --configuration Release --verbosity normal --logger "trx;LogFileName=application-tests.trx" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
        env:
          ConnectionStrings__Default: "Server=localhost;Database=MP_Test;User Id=sa;Password=TestPassword123!;TrustServerCertificate=True;"
        continue-on-error: true  # Continue if tests fail to collect all results

      - name: Run EntityFrameworkCore Tests
        run: dotnet test test/MP.EntityFrameworkCore.Tests/MP.EntityFrameworkCore.Tests.csproj --no-build --configuration Release --verbosity normal --logger "trx;LogFileName=ef-tests.trx" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
        env:
          ConnectionStrings__Default: "Server=localhost;Database=MP_Test;User Id=sa;Password=TestPassword123!;TrustServerCertificate=True;"
        continue-on-error: true

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: '**/TestResults/*.trx'

      - name: Upload Coverage Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: '**/coverage.opencover.xml'

      - name: Publish Test Results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: '**/TestResults/*.trx'
          check_name: 'Backend Test Results'
          comment_mode: 'always'

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore MP.sln

      - name: SonarScanner for .NET - Begin
        run: |
          dotnet tool update dotnet-sonarscanner --global
          dotnet sonarscanner begin /k:"marketplace-pavilion" /o:"vaxes" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.coverage.reportPaths="**/coverage.opencover.xml"
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

      - name: Build with SonarScanner
        run: dotnet build MP.sln --configuration Release
        continue-on-error: true

      - name: SonarScanner for .NET - End
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore MP.sln

      - name: Build with security warnings
        run: dotnet build MP.sln --configuration Release /p:TreatWarningsAsErrors=true
        continue-on-error: true

      - name: Run security checks with dotnet
        run: |
          dotnet tool update dotnet-scriptcs --global
          dotnet list MP.sln package --vulnerable

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, security-analysis]
    if: always()

    steps:
      - name: Create summary
        run: |
          echo "## Backend CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build & Test" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.build-and-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Artifacts: Test Results, Coverage Reports" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Code Quality" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Analysis: SonarQube (${{ secrets.SONAR_HOST_URL }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.security-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Checks: Warnings, Vulnerable packages" >> $GITHUB_STEP_SUMMARY
