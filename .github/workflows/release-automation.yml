name: Release Automation

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'angular/src/**'
      - '.github/workflows/release-automation.yml'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: false
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: write
  packages: read

jobs:
  determine-version:
    name: Determine Release Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      should_release: ${{ steps.version.outputs.should_release }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get commit history
        id: commits
        run: |
          # Get commits since last tag or all commits if no tags
          if git describe --tags --abbrev=0 2>/dev/null; then
            LAST_TAG=$(git describe --tags --abbrev=0)
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%H %s" | grep -E "^[a-f0-9]+ (feat|fix|docs|style|refactor|perf|test|chore|ci)(\(.+\))?:")
            echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT
          else
            COMMITS=$(git log --pretty=format:"%H %s" | grep -E "^[a-f0-9]+ (feat|fix|docs|style|refactor|perf|test|chore|ci)(\(.+\))?:")
            echo "last_tag=initial" >> $GITHUB_OUTPUT
          fi
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "has_commits=$([ -z "$COMMITS" ] && echo false || echo true)" >> $GITHUB_OUTPUT

      - name: Determine version
        id: version
        env:
          COMMITS: ${{ steps.commits.outputs.commits }}
          HAS_COMMITS: ${{ steps.commits.outputs.has_commits }}
          INPUT_VERSION: ${{ github.event.inputs.version }}
        run: |
          CURRENT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          CURRENT_VERSION=${CURRENT_TAG#v}

          # Parse version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Check commit types to determine version bump
          HAS_BREAKING=$(echo "$COMMITS" | grep -c "feat!:" || true)
          HAS_FEATURE=$(echo "$COMMITS" | grep -c "feat:" || true)
          HAS_FIX=$(echo "$COMMITS" | grep -c "fix:" || true)

          if [ "$HAS_BREAKING" -gt 0 ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$HAS_FEATURE" -gt 0 ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [ "$HAS_FIX" -gt 0 ]; then
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"

          if [ -n "$INPUT_VERSION" ]; then
            NEW_VERSION="$INPUT_VERSION"
          fi

          echo "version=v$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "should_release=$HAS_COMMITS" >> $GITHUB_OUTPUT

          echo "Current version: $CURRENT_VERSION"
          echo "New version: v$NEW_VERSION"
          echo "Breaking changes: $HAS_BREAKING"
          echo "Features: $HAS_FEATURE"
          echo "Fixes: $HAS_FIX"

      - name: Generate changelog
        id: changelog
        env:
          COMMITS: ${{ steps.commits.outputs.commits }}
          LAST_TAG: ${{ steps.commits.outputs.last_tag }}
          VERSION: ${{ steps.version.outputs.version }}
          SERVER_URL: ${{ github.server_url }}
          REPOSITORY: ${{ github.repository }}
        run: |
          CHANGELOG="## What's Changed\n\n"

          # Features
          FEATURES=$(echo "$COMMITS" | grep "feat:" | sed 's/^[a-f0-9]* feat(\(.*\)): \(.*\)/- **\1**: \2/g' || true)
          if [ -n "$FEATURES" ]; then
            CHANGELOG="$CHANGELOG### Features\n$FEATURES\n\n"
          fi

          # Fixes
          FIXES=$(echo "$COMMITS" | grep "fix:" | sed 's/^[a-f0-9]* fix(\(.*\)): \(.*\)/- **\1**: \2/g' || true)
          if [ -n "$FIXES" ]; then
            CHANGELOG="$CHANGELOG### Fixes\n$FIXES\n\n"
          fi

          # Other changes
          OTHER=$(echo "$COMMITS" | grep -v "feat:\|fix:" | sed 's/^[a-f0-9]* \(.*\): \(.*\)/- \1: \2/g' || true)
          if [ -n "$OTHER" ]; then
            CHANGELOG="$CHANGELOG### Other Changes\n$OTHER\n\n"
          fi

          CHANGELOG="$CHANGELOG**Full Changelog**: $SERVER_URL/$REPOSITORY/compare/$LAST_TAG...$VERSION"

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: determine-version
    if: needs.determine-version.outputs.should_release == 'true' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git tag -a "${{ needs.determine-version.outputs.version }}" -m "Release ${{ needs.determine-version.outputs.version }}"
          git push origin "${{ needs.determine-version.outputs.version }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.determine-version.outputs.version }}
          release_name: "Release ${{ needs.determine-version.outputs.version }}"
          body: ${{ needs.determine-version.outputs.changelog }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}

  publish-artifacts:
    name: Publish Artifacts
    runs-on: ubuntu-latest
    needs: [determine-version, release]
    if: success()

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.determine-version.outputs.version }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
          cache: false

      - name: Build backend
        run: dotnet build MP.sln --configuration Release

      - name: Publish NuGet package
        run: |
          dotnet nuget push "**/*.nupkg" \
            --source https://api.nuget.org/v3/index.json \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --skip-duplicate || true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'angular/package-lock.json'

      - name: Build frontend
        run: |
          cd angular
          npm ci
          npm run build -- --configuration production

      - name: Publish frontend to npm
        run: |
          cd angular
          npm publish --access public || true
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Upload artifacts to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: angular/dist/mp.tar.gz
          asset_name: mp-frontend-${{ needs.determine-version.outputs.version }}.tar.gz
          asset_content_type: application/gzip
        continue-on-error: true

  notification:
    name: Send Release Notification
    runs-on: ubuntu-latest
    needs: [determine-version, release, publish-artifacts]
    if: always()

    steps:
      - name: Determine notification status
        id: status
        run: |
          if [ "${{ needs.release.result }}" == "success" ]; then
            echo "status=✅ Released"
            echo "color=good"
          else
            echo "status=❌ Release Failed"
            echo "color=danger"
          fi

      - name: Send Slack notification
        if: always()
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_RELEASES }}
        run: |
          if [ -z "$WEBHOOK_URL" ]; then
            echo "Slack webhook not configured, skipping notification"
            exit 0
          fi
          curl -X POST "$WEBHOOK_URL" \
            -H 'Content-Type: application/json' \
            -d @- <<'PAYLOAD'
          {
            "text": "Release ${{ needs.determine-version.outputs.version }} - ${{ steps.status.outputs.status }}",
            "attachments": [{
              "color": "${{ steps.status.outputs.color }}",
              "fields": [
                {"title": "Version", "value": "${{ needs.determine-version.outputs.version }}", "short": true},
                {"title": "Status", "value": "${{ needs.release.result }}", "short": true},
                {"title": "Commit", "value": "${{ github.sha }}", "short": true},
                {"title": "Branch", "value": "${{ github.ref }}", "short": true},
                {"title": "Author", "value": "${{ github.actor }}", "short": true}
              ]
            }]
          }
          PAYLOAD
        continue-on-error: true

      - name: Create release summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ needs.determine-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ needs.release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release URL**: [${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.determine-version.outputs.version }}](${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.determine-version.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Changelog" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs.determine-version.outputs.changelog }}" >> $GITHUB_STEP_SUMMARY

  cleanup:
    name: Cleanup Pre-release Artifacts
    runs-on: ubuntu-latest
    needs: [determine-version, publish-artifacts]
    if: success()

    steps:
      - name: Delete old pre-releases
        uses: actions/github-script@v7
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const preReleases = releases.data.filter(r => r.prerelease);

            // Keep only last 3 pre-releases
            const toDelete = preReleases.slice(3);

            for (const release of toDelete) {
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id
              });
              console.log(`Deleted pre-release: ${release.tag_name}`);
            }
