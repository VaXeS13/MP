@page
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.Extensions.Options
@using Volo.Abp.Account.Localization
@using Volo.Abp.MultiTenancy
@using Volo.Abp.Localization
@model Volo.Abp.Account.Web.Pages.Account.RegisterModel
@inject IHtmlLocalizer<AccountResource> L
@inject ICurrentTenant CurrentTenant
@inject IOptions<AbpLocalizationOptions> LocalizationOptions
@{
    Layout = null;
    var tenantName = CurrentTenant.IsAvailable ? CurrentTenant.Name : "MP";
    var currentCulture = System.Globalization.CultureInfo.CurrentCulture.Name;
    var languages = LocalizationOptions.Value.Languages;
}

@functions {
    string GetLanguageFlag(string cultureName)
    {
        return cultureName.ToLower() switch
        {
            "en" or "en-gb" => "üá¨üáß",
            "zh-hans" => "üá®üá≥",
            "es" => "üá™üá∏",
            "ar" => "üá∏üá¶",
            "hi" => "üáÆüá≥",
            "pt-br" => "üáßüá∑",
            "fr" => "üá´üá∑",
            "ru" => "üá∑üá∫",
            "de-de" => "üá©üá™",
            "tr" => "üáπüá∑",
            "it" => "üáÆüáπ",
            "cs" => "üá®üáø",
            "hu" => "üá≠üá∫",
            "ro-ro" => "üá∑üá¥",
            "sv" => "üá∏üá™",
            "fi" => "üá´üáÆ",
            "sk" => "üá∏üá∞",
            "is" => "üáÆüá∏",
            "zh-hant" => "üáπüáº",
            "pl-pl" => "üáµüá±",
            _ => "üåê"
        };
    }
}

<!DOCTYPE html>
<html lang="@currentCulture">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@L["Register"] - @tenantName</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="~/account-styles.css">
</head>
<body>
    <div class="account-page-container">
        <!-- Language Selector -->
        <div class="language-selector">
            <form method="get" asp-page="/Account/Register">
                <input type="hidden" name="returnUrl" value="@Model.ReturnUrl" />
                <select name="culture" class="language-dropdown" onchange="this.form.submit()">
                    @foreach (var language in languages)
                    {
                        var isSelected = currentCulture.Equals(language.CultureName, StringComparison.OrdinalIgnoreCase) ||
                                        currentCulture.StartsWith(language.CultureName.Split('-')[0], StringComparison.OrdinalIgnoreCase);
                        <option value="@language.CultureName" selected="@isSelected">@GetLanguageFlag(language.CultureName) @language.DisplayName</option>
                    }
                </select>
            </form>
        </div>

        <div class="account-card">
            <!-- Header -->
            <div class="account-card-header">
                <div class="tenant-name">
                    <i class="fas fa-store"></i> @tenantName
                </div>
                <h1>@L["Register"]</h1>
                <div class="page-title">@L["CreateNewAccount"]</div>
            </div>

            <!-- Body -->
            <div class="account-card-body">
                <!-- Validation Summary -->
                @if (!ViewData.ModelState.IsValid)
                {
                    <div class="alert alert-danger" role="alert">
                        <i class="fas fa-exclamation-circle"></i>
                        @Html.ValidationSummary()
                    </div>
                }

                <form method="post">
                    <!-- Email Address -->
                    <div class="form-group">
                        <label asp-for="Input.EmailAddress">
                            <i class="fas fa-envelope me-1"></i>
                            @L["EmailAddress"]
                        </label>
                        <input asp-for="Input.EmailAddress"
                               class="form-control"
                               placeholder="@L["EmailAddress"]"
                               autocomplete="email"
                               autofocus />
                        <span asp-validation-for="Input.EmailAddress" class="text-danger"></span>
                    </div>

                    <!-- Username -->
                    <div class="form-group">
                        <label asp-for="Input.UserName">
                            <i class="fas fa-user me-1"></i>
                            @L["DisplayName:UserName"]
                        </label>
                        <input asp-for="Input.UserName"
                               class="form-control"
                               placeholder="@L["DisplayName:UserName"]"
                               autocomplete="username" />
                        <span asp-validation-for="Input.UserName" class="text-danger"></span>
                    </div>

                    <!-- Password -->
                    <div class="form-group">
                        <label asp-for="Input.Password">
                            <i class="fas fa-lock me-1"></i>
                            @L["Password"]
                        </label>
                        <div class="password-wrapper">
                            <input asp-for="Input.Password"
                                   type="password"
                                   id="passwordField"
                                   class="form-control"
                                   placeholder="@L["Password"]"
                                   autocomplete="new-password"
                                   oninput="checkPasswordStrength()" />
                            <button type="button"
                                    class="password-toggle"
                                    onclick="togglePassword('passwordField', 'toggleIcon1')"
                                    aria-label="Show password">
                                <i class="fas fa-eye" id="toggleIcon1"></i>
                            </button>
                        </div>
                        <div class="password-strength" id="passwordStrength" style="display:none;">
                            <div class="password-strength-bar" id="passwordStrengthBar"></div>
                        </div>
                        <div class="password-strength-text" id="passwordStrengthText"></div>
                        <span asp-validation-for="Input.Password" class="text-danger"></span>
                    </div>

                    <!-- Confirm Password -->
                    <div class="form-group">
                        <label for="confirmPassword">
                            <i class="fas fa-lock me-1"></i>
                            Potwierd≈∫ Has≈Ço
                        </label>
                        <div class="password-wrapper">
                            <input type="password"
                                   id="confirmPasswordField"
                                   name="confirmPassword"
                                   class="form-control"
                                   placeholder="Potwierd≈∫ Has≈Ço"
                                   autocomplete="new-password"
                                   oninput="checkPasswordMatch()" />
                            <button type="button"
                                    class="password-toggle"
                                    onclick="togglePassword('confirmPasswordField', 'toggleIcon2')"
                                    aria-label="Show password">
                                <i class="fas fa-eye" id="toggleIcon2"></i>
                            </button>
                        </div>
                        <div class="password-match-text" id="passwordMatchText"></div>
                        <span class="text-danger" id="confirmPasswordError" style="display: none;">Has≈Ça muszƒÖ byƒá identyczne</span>
                    </div>

                    <!-- Register Button -->
                    <button type="submit" class="btn-primary-custom">
                        <i class="fas fa-user-plus me-2"></i>
                        @L["Register"]
                    </button>
                </form>
            </div>

            <!-- Footer -->
            <div class="account-footer">
                <p class="text-muted">
                    @L["AlreadyRegistered"]
                    <a href="@Url.Page("./Login", new {returnUrl = Model.ReturnUrl, returnUrlHash = Model.ReturnUrlHash})" class="account-link">
                        @L["Login"]
                    </a>
                </p>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script>
        function togglePassword(fieldId, iconId) {
            const passwordField = document.getElementById(fieldId);
            const toggleIcon = document.getElementById(iconId);

            if (passwordField.type === 'password') {
                passwordField.type = 'text';
                toggleIcon.classList.remove('fa-eye');
                toggleIcon.classList.add('fa-eye-slash');
            } else {
                passwordField.type = 'password';
                toggleIcon.classList.remove('fa-eye-slash');
                toggleIcon.classList.add('fa-eye');
            }
        }

        function checkPasswordStrength() {
            const password = document.getElementById('passwordField').value;
            const strengthDiv = document.getElementById('passwordStrength');
            const strengthBar = document.getElementById('passwordStrengthBar');
            const strengthText = document.getElementById('passwordStrengthText');

            if (password.length === 0) {
                strengthDiv.style.display = 'none';
                strengthText.textContent = '';
                return;
            }

            strengthDiv.style.display = 'block';

            let strength = 0;
            if (password.length >= 8) strength++;
            if (password.length >= 12) strength++;
            if (password.match(/[a-z]+/)) strength++;
            if (password.match(/[A-Z]+/)) strength++;
            if (password.match(/[0-9]+/)) strength++;

            strengthBar.className = 'password-strength-bar';

            if (strength <= 2) {
                strengthBar.classList.add('password-strength-weak');
                strengthText.textContent = 'Weak password';
                strengthText.style.color = '\u0023dc3545';
            } else if (strength <= 4) {
                strengthBar.classList.add('password-strength-medium');
                strengthText.textContent = 'Medium password';
                strengthText.style.color = '\u0023ffc107';
            } else {
                strengthBar.classList.add('password-strength-strong');
                strengthText.textContent = 'Strong password';
                strengthText.style.color = '\u002328a745';
            }
        }

        // Form validation before submission
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.querySelector('form[method="post"]');
            form.addEventListener('submit', function(e) {
                const password = document.getElementById('passwordField').value;
                const confirmPassword = document.getElementById('confirmPasswordField').value;

                if (password !== confirmPassword) {
                    e.preventDefault();
                    alert('Has≈Ça muszƒÖ byƒá identyczne. Proszƒô poprawiƒá i spr√≥bowaƒá ponownie.');
                    document.getElementById('confirmPasswordField').focus();
                    return false;
                }
            });
        });

        function checkPasswordMatch() {
            const password = document.getElementById('passwordField').value;
            const confirmPassword = document.getElementById('confirmPasswordField').value;
            const matchText = document.getElementById('passwordMatchText');
            const errorSpan = document.getElementById('confirmPasswordError');

            if (confirmPassword.length === 0) {
                matchText.textContent = '';
                errorSpan.style.display = 'none';
                confirmPasswordField.classList.remove('is-valid', 'is-invalid');
                return;
            }

            if (password === confirmPassword) {
                matchText.textContent = '‚úì Has≈Ça pasujƒÖ do siebie';
                matchText.style.color = '\u002328a745';
                errorSpan.style.display = 'none';
                confirmPasswordField.classList.remove('is-invalid');
                confirmPasswordField.classList.add('is-valid');
            } else {
                matchText.textContent = '‚úó Has≈Ça nie pasujƒÖ do siebie';
                matchText.style.color = '\u0023dc3545';
                errorSpan.style.display = 'block';
                confirmPasswordField.classList.remove('is-valid');
                confirmPasswordField.classList.add('is-invalid');
            }
        }
    </script>

    <!-- Validation Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery-validation@1.19.5/dist/jquery.validate.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery-validation-unobtrusive@3.2.12/dist/jquery.validate.unobtrusive.min.js"></script>
</body>
</html>
